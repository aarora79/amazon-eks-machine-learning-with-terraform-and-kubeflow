image: 
  name: 
  pull_policy: Always
lws:
  size: 2
resources:
  node_type: p4d.24xlarge
  requests:
    "nvidia.com/gpu": 8
    "vpc.amazonaws.com/efa": 4
  limits:
    "nvidia.com/gpu": 8
    "vpc.amazonaws.com/efa": 4
tolerations:
  - key: "nvidia.com/gpu"
    operator: "Exists"
    effect: "NoSchedule"
ebs:
  storage: 400Gi
  mount_path: /tmp
pre_script: 
  - mkdir -p $LOG_ROOT
  - TP_SIZE=8
  - PP_SIZE=2
  - OUTPUT_LOG="$LOG_ROOT/triton_server.log"
  - MODEL_REPO=$OUTPUT_ROOT/model_repo
server:
  ports:
    http: 8000
    grpc: 8001
    metrics: 8002
  readiness_probe:
    period_secs: 10
    failure_threshold: 3
  startup_probe:
    period_secs: 10
    failure_threshold: 180
  liveness_probe:
    period_secs: 10
    failure_threshold: 3
  env:
    - name: HOME
      value: /tmp
    - name: LOG_ROOT
      value: /efs/home/{{ .Release.Name }}/logs
    - name: OUTPUT_ROOT
      value: /efs/home/{{ .Release.Name }}/trtllm
    - name: NCCL_SOCKET_IFNAME 
      value: "^lo,docker0"
    - name: NCCL_DEBUG
      value: "WARN"
    - name: FI_EFA_USE_DEVICE_RDMA
      value: "1"
    - name: FI_PROVIDER
      value: "efa"
    - name: FI_EFA_FORK_SAFE
      value: "1"
    - name: "RDMAV_FORK_SAFE"
      value: "1"
  command:
    - python3
  args:
    - server.py
    - --tp=${TP_SIZE}
    - --pp=${PP_SIZE}
    - --model-repo=${MODEL_REPO}
    - --model=tensorrt_llm
    - --grpc_port=8001
    - --http_port=8000
    - --metrics_port=8002
    - --log-file=$OUTPUT_LOG
    - --namespace=${NAMESPACE}
    - --group-key=${GROUP_KEY}
  autoscaling:
    minReplicas: 1
    maxReplicas: 1
    metrics:
      - type: Pods
        pods:
          metric:
            name: avg_time_queue_us
          target:
            type: AverageValue
            averageValue: 50
